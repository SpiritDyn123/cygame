// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package ProtoMsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EmSvrType int32

const (
	EmSvrType_ST_Invalid EmSvrType = 0
	EmSvrType_Gate       EmSvrType = 1
	EmSvrType_Gs         EmSvrType = 2
	EmSvrType_World      EmSvrType = 3
	EmSvrType_Login      EmSvrType = 4
	EmSvrType_Chat       EmSvrType = 5
	EmSvrType_DB         EmSvrType = 6
	EmSvrType_Cluster    EmSvrType = 7
)

var EmSvrType_name = map[int32]string{
	0: "ST_Invalid",
	1: "Gate",
	2: "Gs",
	3: "World",
	4: "Login",
	5: "Chat",
	6: "DB",
	7: "Cluster",
}
var EmSvrType_value = map[string]int32{
	"ST_Invalid": 0,
	"Gate":       1,
	"Gs":         2,
	"World":      3,
	"Login":      4,
	"Chat":       5,
	"DB":         6,
	"Cluster":    7,
}

func (x EmSvrType) String() string {
	return proto.EnumName(EmSvrType_name, int32(x))
}
func (EmSvrType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type EmClusterOprType int32

const (
	EmClusterOprType_COT_Invalid EmClusterOprType = 0
	EmClusterOprType_Add         EmClusterOprType = 1
	EmClusterOprType_Del         EmClusterOprType = 2
)

var EmClusterOprType_name = map[int32]string{
	0: "COT_Invalid",
	1: "Add",
	2: "Del",
}
var EmClusterOprType_value = map[string]int32{
	"COT_Invalid": 0,
	"Add":         1,
	"Del":         2,
}

func (x EmClusterOprType) String() string {
	return proto.EnumName(EmClusterOprType_name, int32(x))
}
func (EmClusterOprType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type PbSvrBaseInfo struct {
	GroupId int32     `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SvrId   int32     `protobuf:"varint,2,opt,name=svr_id,json=svrId" json:"svr_id,omitempty"`
	SvrType EmSvrType `protobuf:"varint,3,opt,name=svr_type,json=svrType,enum=ProtoMsg.EmSvrType" json:"svr_type,omitempty"`
	Addr    string    `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
}

func (m *PbSvrBaseInfo) Reset()                    { *m = PbSvrBaseInfo{} }
func (m *PbSvrBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*PbSvrBaseInfo) ProtoMessage()               {}
func (*PbSvrBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PbSvrBaseInfo) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *PbSvrBaseInfo) GetSvrId() int32 {
	if m != nil {
		return m.SvrId
	}
	return 0
}

func (m *PbSvrBaseInfo) GetSvrType() EmSvrType {
	if m != nil {
		return m.SvrType
	}
	return EmSvrType_ST_Invalid
}

func (m *PbSvrBaseInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type PbSvrRegisterClusterReqMsg struct {
	SvrInfo  *PbSvrBaseInfo `protobuf:"bytes,1,opt,name=svr_info,json=svrInfo" json:"svr_info,omitempty"`
	SvrTypes []EmSvrType    `protobuf:"varint,2,rep,packed,name=svr_types,json=svrTypes,enum=ProtoMsg.EmSvrType" json:"svr_types,omitempty"`
}

func (m *PbSvrRegisterClusterReqMsg) Reset()                    { *m = PbSvrRegisterClusterReqMsg{} }
func (m *PbSvrRegisterClusterReqMsg) String() string            { return proto.CompactTextString(m) }
func (*PbSvrRegisterClusterReqMsg) ProtoMessage()               {}
func (*PbSvrRegisterClusterReqMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PbSvrRegisterClusterReqMsg) GetSvrInfo() *PbSvrBaseInfo {
	if m != nil {
		return m.SvrInfo
	}
	return nil
}

func (m *PbSvrRegisterClusterReqMsg) GetSvrTypes() []EmSvrType {
	if m != nil {
		return m.SvrTypes
	}
	return nil
}

type PbSvrRegisterClusterResMsg struct {
	Ret *Ret `protobuf:"bytes,1,opt,name=ret" json:"ret,omitempty"`
}

func (m *PbSvrRegisterClusterResMsg) Reset()                    { *m = PbSvrRegisterClusterResMsg{} }
func (m *PbSvrRegisterClusterResMsg) String() string            { return proto.CompactTextString(m) }
func (*PbSvrRegisterClusterResMsg) ProtoMessage()               {}
func (*PbSvrRegisterClusterResMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *PbSvrRegisterClusterResMsg) GetRet() *Ret {
	if m != nil {
		return m.Ret
	}
	return nil
}

type PbSvrBroadClusterMsg struct {
	OprType EmClusterOprType `protobuf:"varint,1,opt,name=opr_type,json=oprType,enum=ProtoMsg.EmClusterOprType" json:"opr_type,omitempty"`
	SvrInfo *PbSvrBaseInfo   `protobuf:"bytes,2,opt,name=svr_info,json=svrInfo" json:"svr_info,omitempty"`
}

func (m *PbSvrBroadClusterMsg) Reset()                    { *m = PbSvrBroadClusterMsg{} }
func (m *PbSvrBroadClusterMsg) String() string            { return proto.CompactTextString(m) }
func (*PbSvrBroadClusterMsg) ProtoMessage()               {}
func (*PbSvrBroadClusterMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PbSvrBroadClusterMsg) GetOprType() EmClusterOprType {
	if m != nil {
		return m.OprType
	}
	return EmClusterOprType_COT_Invalid
}

func (m *PbSvrBroadClusterMsg) GetSvrInfo() *PbSvrBaseInfo {
	if m != nil {
		return m.SvrInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*PbSvrBaseInfo)(nil), "ProtoMsg.PbSvrBaseInfo")
	proto.RegisterType((*PbSvrRegisterClusterReqMsg)(nil), "ProtoMsg.PbSvrRegisterClusterReqMsg")
	proto.RegisterType((*PbSvrRegisterClusterResMsg)(nil), "ProtoMsg.PbSvrRegisterClusterResMsg")
	proto.RegisterType((*PbSvrBroadClusterMsg)(nil), "ProtoMsg.PbSvrBroadClusterMsg")
	proto.RegisterEnum("ProtoMsg.EmSvrType", EmSvrType_name, EmSvrType_value)
	proto.RegisterEnum("ProtoMsg.EmClusterOprType", EmClusterOprType_name, EmClusterOprType_value)
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x9d, 0x7c, 0xe7, 0x2d, 0x5d, 0x87, 0x51, 0x31, 0xf6, 0x62, 0xc8, 0xa9, 0xec, 0x21,
	0x48, 0x65, 0x8f, 0x1e, 0xdc, 0x2e, 0x94, 0x80, 0xa5, 0x25, 0x2d, 0x78, 0x2c, 0x89, 0x33, 0x8d,
	0x81, 0x98, 0x89, 0x33, 0x69, 0xa0, 0x47, 0x05, 0xff, 0x6f, 0x99, 0x49, 0x6a, 0x5b, 0xa1, 0xb0,
	0xa7, 0x3c, 0x79, 0x3f, 0xf2, 0xfc, 0x9e, 0x97, 0xc0, 0xf8, 0x5b, 0x75, 0x90, 0x2d, 0x13, 0x71,
	0x23, 0x78, 0xcb, 0x89, 0xb7, 0x56, 0x8f, 0xa5, 0x2c, 0x26, 0x90, 0x67, 0x92, 0xf5, 0xd5, 0xe8,
	0x0f, 0x82, 0xf1, 0x3a, 0xdf, 0x74, 0xe2, 0x31, 0x93, 0x2c, 0xa9, 0xf7, 0x9c, 0xbc, 0x03, 0xaf,
	0x10, 0xfc, 0xd0, 0xec, 0x4a, 0x1a, 0xa0, 0x10, 0x4d, 0xed, 0xd4, 0xd5, 0xef, 0x09, 0x25, 0x6f,
	0xc0, 0x91, 0x9d, 0x50, 0x0d, 0x43, 0x37, 0x6c, 0xd9, 0x89, 0x84, 0x92, 0x18, 0x3c, 0x55, 0x6e,
	0x8f, 0x0d, 0x0b, 0xcc, 0x10, 0x4d, 0xef, 0x66, 0xaf, 0xe2, 0x93, 0x59, 0xcc, 0x7e, 0x6c, 0x3a,
	0xb1, 0x3d, 0x36, 0x2c, 0x75, 0x65, 0x2f, 0x08, 0x01, 0x2b, 0xa3, 0x54, 0x04, 0x56, 0x88, 0xa6,
	0x7e, 0xaa, 0x75, 0xf4, 0x1b, 0xc1, 0x44, 0x73, 0xa4, 0xac, 0x28, 0x15, 0xf5, 0xbc, 0x87, 0x4f,
	0xd9, 0xcf, 0xa5, 0x2c, 0xc8, 0xac, 0xb7, 0x28, 0xeb, 0x3d, 0xd7, 0x50, 0xa3, 0xd9, 0xdb, 0xb3,
	0xc5, 0x15, 0xbf, 0xb6, 0xd1, 0x41, 0x3e, 0x80, 0x7f, 0xc2, 0x92, 0x81, 0x11, 0x9a, 0xb7, 0xb8,
	0xbc, 0x81, 0x4b, 0x46, 0x9f, 0x6e, 0x31, 0x48, 0xc5, 0xf0, 0x1e, 0x4c, 0xc1, 0xda, 0xc1, 0x7e,
	0x7c, 0xfe, 0x52, 0xca, 0xda, 0x54, 0x75, 0xa2, 0x5f, 0x08, 0x5e, 0xf7, 0x2c, 0x82, 0x67, 0x74,
	0x58, 0x56, 0x9b, 0x0f, 0xe0, 0xf1, 0x66, 0x38, 0x10, 0xd2, 0x07, 0x9a, 0x5c, 0x82, 0x0c, 0x93,
	0xab, 0x66, 0xb8, 0x13, 0xef, 0xc5, 0x55, 0x68, 0xe3, 0x79, 0xa1, 0xef, 0x73, 0xf0, 0xff, 0x25,
	0x23, 0x77, 0x00, 0x9b, 0xed, 0x2e, 0xa9, 0xbb, 0xac, 0x2a, 0x29, 0x7e, 0x41, 0x3c, 0xb0, 0x16,
	0x59, 0xcb, 0x30, 0x22, 0x0e, 0x18, 0x0b, 0x89, 0x0d, 0xe2, 0x83, 0xfd, 0x95, 0x8b, 0x8a, 0x62,
	0x53, 0xc9, 0x2f, 0xbc, 0x28, 0x6b, 0x6c, 0xa9, 0xb9, 0xf9, 0xf7, 0xac, 0xc5, 0xb6, 0x9a, 0x7b,
	0x7a, 0xc4, 0x0e, 0x19, 0x81, 0x3b, 0x50, 0x62, 0xf7, 0xfe, 0x01, 0xf0, 0xff, 0xd0, 0xe4, 0x25,
	0x8c, 0xe6, 0xab, 0x4b, 0x2f, 0x17, 0xcc, 0xcf, 0x94, 0x62, 0xa4, 0xc4, 0x13, 0xab, 0xb0, 0x91,
	0x3b, 0xfa, 0x8f, 0xfb, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xe0, 0x51, 0xdf, 0x98, 0x02,
	0x00, 0x00,
}
