// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ss_common.proto

package ProtoMsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SVR_MSG_COMMON_PUSH_PLAYER_SVRID
type PbSvrCommonPushPlayerSvrId struct {
	Uid     uint64    `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	SvrType EmSvrType `protobuf:"varint,2,opt,name=svr_type,json=svrType,enum=ProtoMsg.EmSvrType" json:"svr_type,omitempty"`
	SvrId   int32     `protobuf:"varint,3,opt,name=svr_id,json=svrId" json:"svr_id,omitempty"`
	Add     bool      `protobuf:"varint,4,opt,name=add" json:"add,omitempty"`
}

func (m *PbSvrCommonPushPlayerSvrId) Reset()                    { *m = PbSvrCommonPushPlayerSvrId{} }
func (m *PbSvrCommonPushPlayerSvrId) String() string            { return proto.CompactTextString(m) }
func (*PbSvrCommonPushPlayerSvrId) ProtoMessage()               {}
func (*PbSvrCommonPushPlayerSvrId) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *PbSvrCommonPushPlayerSvrId) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PbSvrCommonPushPlayerSvrId) GetSvrType() EmSvrType {
	if m != nil {
		return m.SvrType
	}
	return EmSvrType_ST_Invalid
}

func (m *PbSvrCommonPushPlayerSvrId) GetSvrId() int32 {
	if m != nil {
		return m.SvrId
	}
	return 0
}

func (m *PbSvrCommonPushPlayerSvrId) GetAdd() bool {
	if m != nil {
		return m.Add
	}
	return false
}

func init() {
	proto.RegisterType((*PbSvrCommonPushPlayerSvrId)(nil), "ProtoMsg.PbSvrCommonPushPlayerSvrId")
}

func init() { proto.RegisterFile("ss_common.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2e, 0x8e, 0x4f,
	0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x08, 0x00, 0x51,
	0xbe, 0xc5, 0xe9, 0x52, 0xbc, 0xc9, 0x39, 0xa5, 0xc5, 0x25, 0xa9, 0x45, 0x10, 0x09, 0xa5, 0x76,
	0x46, 0x2e, 0xa9, 0x80, 0xa4, 0xe0, 0xb2, 0x22, 0x67, 0xb0, 0xf2, 0x80, 0xd2, 0xe2, 0x8c, 0x80,
	0x9c, 0xc4, 0xca, 0xd4, 0xa2, 0xe0, 0xb2, 0x22, 0xcf, 0x14, 0x21, 0x01, 0x2e, 0xe6, 0xd2, 0xcc,
	0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x10, 0x53, 0x48, 0x8f, 0x8b, 0xa3, 0xb8, 0xac,
	0x28, 0xbe, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x58, 0x0f, 0x66,
	0xb8, 0x5e, 0x6a, 0x6e, 0x70, 0x59, 0x51, 0x48, 0x65, 0x41, 0x6a, 0x10, 0x7b, 0x31, 0x84, 0x21,
	0x24, 0xca, 0xc5, 0x06, 0x52, 0x9f, 0x99, 0x22, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1a, 0xc4, 0x5a,
	0x0c, 0x33, 0x38, 0x31, 0x25, 0x45, 0x82, 0x45, 0x81, 0x51, 0x83, 0x23, 0x08, 0xc4, 0x4c, 0x62,
	0x03, 0x3b, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x02, 0x8a, 0x8c, 0x49, 0xbc, 0x00, 0x00,
	0x00,
}
